#!/usr/bin/env python2
import os
import re

cur_path = os.path.dirname(os.path.realpath(__file__))
generator_path = os.path.join(cur_path, '../')
include_pattern = re.compile(r'//\s*IMPORT\s+(.+)')

version_pattern = re.compile(r'(VERSION\s+".*")')
ns_pattern = re.compile(r'NS_\s*:')
ns_val_pattern = re.compile(r'\t([A-Za-z_][A-Za-z0-9_]+)')
bs_pattern = re.compile(r'(BS_\s*:.*)')
bu_pattern = re.compile(r'(BU_\s*:.*)')
bo_sg_pattern = re.compile(r'((BO_[ ]+[0-9]+[ ]+[A-Za-z_]|[ ]*SG_\s+[A-Za-z_]).*)')
cm_pattern = re.compile(r'(CM_\s.+;)')
val_pattern = re.compile(r'(VAL_\s+[0-9].+;)')

def read_dbc(dir_name, filename):
    with open(os.path.join(dir_name, filename)) as file_in:
        return file_in.read()


def create_dbc(dir_name, filename):
    dbc_file_in = read_dbc(dir_name, filename)

    includes = include_pattern.findall(dbc_file_in)

    output_filename = filename.replace('.dbc', '_generated.dbc')
    output_file_location = os.path.join(generator_path, output_filename)

    for include_filename in includes:
        dbc_file_in = dbc_file_in + read_dbc(dir_name, include_filename)

    with open(output_file_location, 'w') as dbc_file_out:
        dbc_file_out.write('// AUTOGENERATED FILE, DO NOT EDIT\n')
        for include_filename in includes + [filename]:
            dbc_file_out.write('// IMPORTED {}\n'.format(include_filename))
        dbc_file_out.write("\n")

        dbc_file_out.write("\n".join(version_pattern.findall(dbc_file_in)) + "\n\n")
        dbc_file_out.write("\n".join(ns_pattern.findall(dbc_file_in)) + "\n")
        for sym in ns_val_pattern.findall(dbc_file_in):
            dbc_file_out.write("\t" + sym + "\n")
        dbc_file_out.write("\n")

        # BS_ must be present
        bs = "\n".join(bs_pattern.findall(dbc_file_in))
        if len(bs) == 0:
            bs = "BS_:"
        dbc_file_out.write(bs + "\n\n")

        # BU_ must be present
        bu = "\n".join(bu_pattern.findall(dbc_file_in))
        if len(bu) == 0:
            bu = "BU_:"
        dbc_file_out.write(bu + "\n")

        for a, b in bo_sg_pattern.findall(dbc_file_in):
            if b[:3] == 'BO_':
                dbc_file_out.write("\n")
            dbc_file_out.write(a + "\n")
        dbc_file_out.write("\n\n")
        dbc_file_out.write("\n".join(cm_pattern.findall(dbc_file_in)) + "\n")
        dbc_file_out.write("\n".join(val_pattern.findall(dbc_file_in)) + "\n")

for dir_name, _, filenames in os.walk(cur_path):
    if dir_name == cur_path:
        continue

    print dir_name
    for filename in filenames:
        if filename.startswith('_'):
            continue

        print filename
        create_dbc(dir_name, filename)
